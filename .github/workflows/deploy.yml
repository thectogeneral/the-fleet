name: Fleet Monitoring system

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Create PostgreSQL database
        shell: bash
        run: |
          docker run -d --name postgres-db -e POSTGRES_DB=test_db -e POSTGRES_USER=test_user -e POSTGRES_PASSWORD=test_password -p 5432:5432 postgres:latest
          sleep 30
          docker ps -a
          docker logs postgres-db

      - name: Run tests
        shell: bash
        run: |
          export TEST_DB_USERNAME=test_user
          export TEST_DB_PASSWORD=test_password
          export TEST_DB_NAME=test_db
          export TEST_DB_HOST=localhost
          export TEST_DB_PORT=5432
          export NODE_ENV=test
          npm test

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy files to EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --exclude 'node_modules' ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/fleet-managment-system

      - name: Set Environment Variables on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo 'export NODE_ENV=${{ secrets.NODE_ENV }}' >> ~/.bashrc
            echo 'export DB_USERNAME=${{ secrets.DB_USERNAME }}' >> ~/.bashrc
            echo 'export DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> ~/.bashrc
            echo 'export DB_NAME=${{ secrets.DB_NAME }}' >> ~/.bashrc
            echo 'export DB_HOST=${{ secrets.DB_HOST }}' >> ~/.bashrc
            echo 'export PORT=${{ secrets.PORT }}' >> ~/.bashrc
            source ~/.bashrc
          EOF

      - name: Install and Configure Nginx if Not Configured
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install -y nginx
            fi
            if [ ! -f /etc/nginx/sites-available/fleet-monitoring-system ]; then
              sudo rm /etc/nginx/sites-enabled/default || true
              echo '
              server {
                  listen 80;

                  location / {
                      proxy_pass http://localhost:3000;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }' | sudo tee /etc/nginx/sites-available/fleet-monitoring-system
              sudo ln -s /etc/nginx/sites-available/fleet-monitoring-system /etc/nginx/sites-enabled/
              sudo nginx -t
              sudo systemctl restart nginx
            fi
          EOF

      - name: SSH and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if ! command -v npm &> /dev/null; then
              echo "npm could not be found, installing..."
              sudo apt update && sudo apt install -y nodejs npm
            fi

            if ! command -v forever &> /dev/null; then
              echo "forver could not be found, installing..."
              npm install -g forever
            fi

            # Deployment commands
            cd ~/fleet-managment-system
            npm install
            forever stopall
            forever start index.js
          EOF
